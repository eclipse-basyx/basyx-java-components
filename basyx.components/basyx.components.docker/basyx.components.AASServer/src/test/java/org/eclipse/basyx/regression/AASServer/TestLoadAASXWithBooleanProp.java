/*******************************************************************************
 * Copyright (C) 2021 the Eclipse BaSyx Authors
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 ******************************************************************************/
package org.eclipse.basyx.regression.AASServer;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import javax.xml.parsers.ParserConfigurationException;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.eclipse.basyx.components.aas.aasx.AASXPackageManager;
import org.eclipse.basyx.submodel.metamodel.api.ISubmodel;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.ISubmodelElement;
import org.eclipse.basyx.support.bundle.AASBundle;
import org.junit.BeforeClass;
import org.junit.Test;
import org.xml.sax.SAXException;

/**
 * J-Unit tests for AASx package explorer. This test checks the parsing of aas,
 * submodels, assets and concept-descriptions. it also checks whether the aas
 * have correct references to the asets and submodels
 * 
 * @author fried, fischer, jungjan
 *
 */
public class TestLoadAASXWithBooleanProp {
	/**
	 * path to the aasx package
	 */
	private static final String aasxPath = "aasx/boolean_test.aasx";

	/**
	 * the aasx package converter
	 */
	private static AASXPackageManager packageConverter;

	/**
	 * AAS bundle which will be generated by the XMLAASBundleFactory
	 */
	private Set<AASBundle> aasBundles;

	/**
	 * Initialize the AASX package converter
	 */
	@BeforeClass
	public static void setup() {
		// Create the aasx package converter with the path to the aasx package
		packageConverter = new AASXPackageManager(aasxPath);
	}

	/**
	 * Test parsing of aas, assets, submodels and concept-descriptions
	 */
	@Test
	public void testCheckAasxConverter() {
		// Parse aas from the XML and create the AAS Bundle with refs to submodels
		try {
			aasBundles = packageConverter.retrieveAASBundles();
		} catch (ParserConfigurationException | SAXException | IOException | InvalidFormatException e) {
			e.printStackTrace();
		}

		// get the Optional<Submodel> of the selected submodel and the submodel itself
		// as well as its submodelElements
		Set<ISubmodel> submodelsFromConverter = getFirstSubmodel(aasBundles, "aas");
		Optional<ISubmodel> specificSubmodelOptional = getSpecificSubmodelAsOptional(submodelsFromConverter, "sm");
		ISubmodel specificSubmodel = specificSubmodelOptional.get();
		Map<String, ISubmodelElement> specificSubmodelElements = specificSubmodel.getSubmodelElements();

		for (Map.Entry<String, ISubmodelElement> entry : specificSubmodelElements.entrySet()) {
			ISubmodelElement submodelElement = entry.getValue();
			assertEquals(Boolean.class, submodelElement.getValue().getClass());
		}

	}

	private static Optional<ISubmodel> getSpecificSubmodelAsOptional(Set<ISubmodel> submodels, String specificSubmodelIdShort) {
		return submodels.stream().filter(s -> s.getIdShort().equals(specificSubmodelIdShort)).findFirst();
	}

	private static Set<ISubmodel> getFirstSubmodel(Set<AASBundle> givenBundles, String specificSubmodelIdShort) {
		return givenBundles.stream().filter(b -> b.getAAS().getIdShort().equals(specificSubmodelIdShort)).findFirst().get().getSubmodels();
	}
}
