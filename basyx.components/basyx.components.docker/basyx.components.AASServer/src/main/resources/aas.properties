# #############################
# AAS Server configuration file
# #############################

# #############################
# Backend
# #############################
# Specifies the backend that loads the AAS and Submodels 

# InMemory - does not persist AAS or submodels 
aas.backend=InMemory

# MongoDB - persists data within a MongoDB
# See connection configuration in mongodb.properties
# aas.backend=MongoDB

# #############################
# Source
# #############################
# Possible to load an AAS Environment from a file

aas.source=

# Other examples (Currently supported: *.xml, *.json and  *.aasx): 
# aas.source=aasx/myAAS.aasx
# aas.source=aasx/myAAS.xml
# aas.source=aasx/myAAS.json
# Or when encapsulated in the docker volume for this container:
# aas.source=/usr/share/config/myAAS.aasx
# Similarly, multiple sources can be specified using a JSON syntax:
# aas.source=["json/aas.json","aasx/aas.aasx","xml/aas.xml"]

# #############################
# MQTT
# #############################
# Possible to enable MQTT events

aas.events=NONE
# aas.events=MQTT
# aas.events=MQTTV2
# aas.events=MQTTV2_SIMPLE_ENCODING

# Id that is used in e.g. mqtt topics to enable multiple aas-servers connected to one broker
aas.id=aas-server

# #############################
# AASX Upload
# #############################
# Possible to enable AASX Upload

aas.aasxUpload=Enabled
# aas.aasxUpload=Disabled

# #############################
# Registry
# #############################
# If specified, can directly register the AAS that has been loaded from the source file.
# path specifies the registry endpoint
# registry.path=http://localhost:4000/registry/

# #############################
# Host
# #############################
# Host specifies the endpoint of the deployed AAS component
# If host is empty, the registered AAS endpoint is derived from the context properties

# registry.host=

# #############################
# Submodels
# #############################
# If one or more submodels are specified here, only the submodels will be registered at the 
# registry. This can be used for distributed submodel deployments
# In case of an empty or no list, this does not have an effect. By default, all submodels
# are registered at a given registry.

# registry.submodels=["smId1","smId2"]

# ###########################
# Authorization
# ###########################
# Enables Authorization via OAuth2, disabled by default

# aas.authorization=Enabled
aas.authorization=Disabled

# ###########################
# Property Delegation
# ###########################
# Delegate property value retrieval to arbitrary endpoints, enabled by default

aas.delegation=Enabled
# aas.delegation=Disabled

# ##############################################
# Authorization Credentials for Secured Registry
# ##############################################
#tokenEndpoint=http://127.0.0.1:9006/auth/realms/basyx-demo/protocol/openid-connect/token
#clientId=basyx-demo
#clientSecret=OZtOv3TlXvEhhKf705Z53J8QL8YPY9UJP
#clientScopes=["urn:org.eclipse.basyx:scope:aas-registry:read","urn:org.eclipse.basyx:scope:aas-registry:write"]
